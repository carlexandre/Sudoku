Olá!! (APRESENTAÇÃO) Hoje viemos explicar nosso código que tem o objetivo de fazer um SUDOKU, no modo interativo e no modo batch.

Nosso código tem ONZE funções, sendo oito para o funcionamento do jogo e três para a organização da saída do programa no modo interativo. Além da função principal que junta todas essas funções. 

Começando pelas três, que auxiliaram na criação do design do jogo, de um MENU, de uma ABA de comandos e da própria tabela que irá mostrar o sudoku atualizado.

FUNÇÃO TABELA: Essa função ela tem como parâmetro apenas uma matriz, que será sempre a matriz que armazenará os valores do sudoku. Ela é basicamente feita de vários prints e for para ficar no formato de uma tabela. Não retorna nada.

FUNÇÃO SHOW_MENU: A função show menu, não tem parâmetros. Mas ela além de printar o menu completo, ela já pede a interação do jogador para saber se ele quer começar o jogo ou ir para a aba de comandos. Essa função retorna a variável booleana "começar" que irá retornar para a função main se o jogo pode ou não ser iniciado.

FUNÇÃO SHOW_COMANDOS: A função show comandos, também, não tem parâmetros, e ela também é bastante parecida com a função anterior. Ela irá printar a aba de comandos, junto com os comandos necessários para jogar o sudoku. Além dela também pedir a interação do jogador, se ele deseja voltar para o menu ou iniciar o jogo. Essa função retorna novamente a variável "começar" mas dessa vez para a função show menu que irá saber se ela irá voltar para o menu ou irá iniciar o jogo.

Ainda falando do design e apresentação do jogo, durante todo o programa usamos um clear da biblioteca os para sempre limpar uma jogada anterior e usamos o comando \033 para mudar as cores no terminal.

Essas funções só serão usadas durante o modo interativo.

Agora, iremos para as funções que ajudam no funcionamento do sudoku. Entre elas temos 2 principais que são as de leituras e temos 6 auxiliadoras que são necessárias para fazer as principais funcionarem. 

Começando pelas funções auxiliadoras.

FUNÇÃO ADD: Essa função foi feita para adicionar os valores na matriz principal do sudoku. Tem como parâmetros a coluna, a linha, o valor a ser adicionado e a matriz que deseja adicionar esse valor.

FUNÇÃO DELETE: Ao contrário da função anterior, essa é feita para deletar o valor em determinada posição. Tem como parâmetros a coluna, a linha e a matriz que deseja acessar. 

FUNÇÃO COMPLETA: Essa função é utilizada para saber se a tabela do sudoku está completa, assim saberemos se a pessoa conseguiu ganhar o jogo ou não. Tem como parâmetro apenas a matriz com os valores do sudoku. Ela irá percorrer a matriz inteira e se achar uma posição com o valor sendo vazio, ela irá retornar como não completa, no caso False. Caso não ache, ela retornará True, ou seja, completa.

FUNÇÃO PISTASOCUPADAS: Essa função foi criada para verificar se a posição que o jogador deseja adicionar o valor é uma pista, caso seja será uma jogada inválida. Tem como parâmetros a coluna, a linha e a lista que será a lista de pistas guardadas. Ela tem uma flag que inicia como Falsa e depois irá verificar se a posição é uma pista ou não. Essa função terá que fazer um tratamento da lista de pistas transformando a coluna de letra para número. Caso a posição seja uma pista ela irá retornar True, ao contrário irá retornar False.

FUNÇÃO VERIFICAR: A função verificar é uma das mais importante do programa, pois ela irá seguir as regras principais do sudoku, ou seja, irá verificar por linha, coluna e quadrante se há ou não um valor igual ao que o jogador deseja adicionar. Ela tem como parâmetros a coluna, a linha, o valor, a matriz e as variáveis booleanas sãopistas e trocar, que são parâmetros opcionais. Sãopistas e trocar são usadas, respectivamente, para avisar se o que está sendo verificado é uma pista e para avisar se o jogador está desejando trocar o valor. Essa função ela tem uma variável flag que a partir do momento que ficar falsa, ela não irá mais verificar, irá somente retornar essa variável. Ela, também, irá ver se a posição que o jogador deseja adicionar é uma pista, o que dará em uma jogada inválida, pela função mencionada anteriormente, pistasocupadas. Também estará verificando, se a posição já está ocupada, caso esteja, a função irá ver se a varíavel trocar é falsa, caso seja a posição é invalida, caso não seja, a posição irá ser trocada, então a função continuará sendo lida. E por fim, ela irá fazer a verificação da linha, da coluna e do quadrante por meio de whiles e ifs. Por fim, ela irá retornar a flag sendo True como jogada válida e False como jogada inválida.

FUNÇÃO DICAS: Essa função foi feita para quando solicitarem dicas em uma certa posição. Tem coluna, linha e uma matriz como parâmetros. Durante a função, quando for chamada, ela irá ver quais dicas disponíveis teremos. Para isso ela irá chamar a função VERIFICAR, explicada anteriormente. Essa função dicas, também, já imprime os valores disponíveis para a posição escolhida e retorna para a função leitura uma variável booleana caso a dica pedida seja inválida, como a posição já estiver ocupada ou não houver dicas para tal posição.

Agora temos as duas funções principais de leitura, para cada modo o INTERATIVO e o modo BATCH

FUNÇÃO LEITURAIP: A função do modo interativo se chama leituraIP, essa função é a maior do programa e nela que acontece a leitura dos arquivos, o tratamento deles, a verificação da jogada e a adição na tabela. Como dito anteriormente, ela engloba todas as outras funções. Essa função também faz a leitura das pistas, tanto do modo interativo quando do modo batch. Tem como parâmetros a variável booleana poj, que será usada para saber se é uma pista como False ou uma jogada como True e a variável string que será a jogada que o jogador irá fazer. Durante toda essa função temos a variável jogada_inv, que é utilizada para quando a partir do mundo a jogada for dada como inválida, ela pular a função inteira e ir para o final, retornando essa mesma variável para a função principal. Temos também a variável booldicasdelete, que é usada quando o jogador pedir uma dica ou para deletar determinando item, pois será usada para reverter o valor da variável jogada_inv, pois para não precisar percorrer toda a função, ela irá ser dada como  inválida e no final caso booldicasdelete estiver como True, ela será retornada como válida. Caso a leitura seja de uma pista, ela irá abrir o arquivo e irá fazer um tratamento neles numa lista com tamanho 3, deixando apenas a coluna, a linha e o valor. Durante essa função será verificado se a jogada é valida por escrita, ou seja, se está da forma como o jogo pediu. Como por exemplo, se as colunas estão de A até I, as linhas e os valores de 1 até 9 e se as pistas são maiores que 1 e menores que 81. Caso seja uma jogada, ela irá verificar se é uma dica, uma troca, uma remoção ou uma adição e irá por meio das funções anteriores determinar se a jogada está válida. No final, será retornado se a jogada está válida como False ou inválida como True.

FUNÇÃO LEITURABATCH: Essa função irá ler as jogadas feitas no modo batch, que é o modo em que será entregue todas as jogadas que o jogador deseja e será informado as jogadas inválidas e se o sudoku foi completo. Ela não tem parâmetros, mas tem uma lista que salvará as jogadas desse modo. Essa função irá ler o arquivo e adicionará dentro da lista citada. Essa lista irá ser percorrida por um for e caso a jogada seja inválida a variável jogada_inv irá ficar True e paralelamente a função de leitura anterior a função não irá mais ser percorrida, irá apenas para o final. Ela também irá verificar cada jogada, por meio da função verificar e caso seja dada como inválida ela será adicionada na lista jogadas_invalidas que será usada como ponteiro no python, para ir à função principal. Por fim, essa função irá ter lido todas as jogadas dentro do arquivo e irá ter guardado todas as inválidas dentro de uma lista. 

FUNÇÃO PRINCIPAL: Finalmente chegamos na função principal, que é nela que será organizado todas as funções anteriores. Começamos inicializando uma matriz chamada sudoku, que irá armazenar todos os valores do jogo. Após isso, temos a verificação se está no modo batch, caso esteja a variável modo batch irá ser True e quando for para a leitura das pistas a formatação do texto caso dê erro será igual ao que o professor solicitou. E com isso, iremos para a leitura das pistas chamando a função leituraIP, com o parâmetro poj sendo a várivel pistaoujogada que é dada como False, mas logo após a leitura é alterada para True, ou seja, será inicializado as jogadas. Depois da verificação das pistas, temos a distinção de modos. Caso o tamanho de argumento entrado seja 2, teremos o modo interativo, caso seja 3, será o modo batch. 

Primeiro, vamos com o modo interativo, no começo iremos mostrar o menu dentro de um while que só irá sair dele caso o jogador deseja iniciar o jogo lá na função menu ou na função de comandos. Após sair do menu, o programa irá entrar em outro while, desse vez só irá sair após completar a tabela do sudoku. Dentro desse while temos a função tabela sendo mostrada caso a variável mostrartabela seja True, temos também o input das jogadas e a leitura delas em um outro while com a função leituraIP sendo chamada para caso a jogada seja inválida ela só irá sair desse novo outro while caso a jogada seja válida. Após sair do while da tabela completa, mostramos a tabela final e uma mensagem de vitória. 

Agora, para finalizar temos o modo Batch, que começa chamando a função leiturabatch() que irá guardar as jogadas inválidas dentro de uma lista que será percorrida por um for e irá printar as jogadas inválidas. Após isso será chamado a função completa para saber se o sudoku foi preenchido ou não, mostrando a frase respectiva para cada caso.

Bom, e esse foi nosso código de trabalho para a criação de um Sudoku.

